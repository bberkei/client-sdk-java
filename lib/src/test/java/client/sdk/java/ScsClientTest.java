/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package client.sdk.java;

import grpc.cache_client.Result;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.io.IOException;
import java.nio.Buffer;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.util.concurrent.CompletionStage;
import java.util.concurrent.ExecutionException;

class ScsClientTest {
    ScsClient c;

    @BeforeEach
    void setUp() {
        c = new ScsClient("FIXME");
    }

    @Test
    void testBlockingClientHappyPath() {
        try {
            //Set Key sync
            ClientSetResponse setRsp = c.set(
                    "foo",
                    ByteBuffer.wrap("bar".getBytes(StandardCharsets.UTF_8)),
                    100
            );
            Assertions.assertEquals(Result.Ok, setRsp.getResult());

            // Get Key that was just set
            ClientGetResponse<ByteBuffer> rsp = c.get("foo");

            Assertions.assertEquals(Result.Hit, rsp.getResult());
            Assertions.assertEquals("bar", StandardCharsets.US_ASCII.decode(rsp.getBody()).toString());

        } catch (IOException e) {
            Assertions.fail(e);
        }
    }

    @Test
    void testAsyncClientHappyPath() {
        try {

            // Set Key Async
            CompletionStage<ClientSetResponse> setRsp = c.setAsync(
                    "foo",
                    ByteBuffer.wrap("bar".getBytes(StandardCharsets.UTF_8)),
                    100
            );
            Assertions.assertEquals(Result.Ok, setRsp.toCompletableFuture().get().getResult());

            // Get Key Async
            ClientGetResponse<ByteBuffer> rsp = c.getAsync("foo").toCompletableFuture().get();

            Assertions.assertEquals(Result.Hit, rsp.getResult());
            Assertions.assertEquals("bar", StandardCharsets.US_ASCII.decode(rsp.getBody()).toString());

        } catch (IOException | InterruptedException | ExecutionException e) {
            Assertions.fail(e);
        }
    }

}
